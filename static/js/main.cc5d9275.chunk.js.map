{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","file","setFile","fileName","setFileName","uploader","setUploader","_handleSubmit","e","a","preventDefault","formData","FormData","append","axios","post","headers","res","data","filePath","response","status","console","log","msg","basename","process","onSubmit","type","name","onChange","target","files","onClick","value","src","alt","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"oTAqDgBA,MA9ChB,WAAgB,IAAD,EACOC,mBAAS,IADhB,mBACRC,EADQ,KACFC,EADE,OAEeF,mBAAS,eAFxB,mBAERG,EAFQ,KAEEC,EAFF,OAGeJ,mBAAS,IAHxB,mBAGRK,EAHQ,KAGEC,EAHF,KAUTC,EAAa,uCAAE,WAAMC,GAAN,uBAAAC,EAAA,6DACjBD,EAAEE,kBACEC,EAAW,IAAIC,KACVC,OAAO,OAAQZ,GAHP,kBAMKa,IAAMC,KAAK,QAASJ,EAAU,CAC5CK,QAAS,CAAC,eAAgB,yBAPjB,OAMPC,EANO,SASgBA,EAAIC,KAA1Bf,EATM,EASNA,SAAUgB,EATJ,EASIA,SACjBb,EAAY,CAACH,WAAUgB,aAVV,kDAYe,MAAxB,KAAIC,SAASC,OACbC,QAAQC,IAAI,SAEZD,QAAQC,IAAI,KAAIH,SAASF,KAAKM,KAfrB,0DAAF,sDAoBnB,OAAQ,kBAAC,IAAD,CAAeC,SAAUC,mBACrB,6BACI,0BAAMC,SAAUpB,GAEZ,2BAAOqB,KAAK,OAAOC,KAAK,OAAOC,SA7BjC,SAAAtB,GACZN,EAAQM,EAAEuB,OAAOC,MAAM,IACvB5B,EAAYI,EAAEuB,OAAOC,MAAM,GAAGH,SA4BhB,2BAAOD,KAAM,SAAUK,QAAS1B,GAAiBJ,GAEjD,2BAAOyB,KAAM,SAAUM,MAAO,YAGlC,6BACI,yBAAKC,IAAK9B,EAASc,SAAUiB,IAAI,YCpCjCC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL/B,QAAQ+B,MAAMA,EAAMC,c","file":"static/js/main.cc5d9275.chunk.js","sourcesContent":["import React, { useState} from 'react';\nimport FormData from 'form-data'\n\nimport './App.css';\nimport axios from \"axios\";\nimport {BrowserRouter} from \"react-router-dom\";\n\nfunction App() {\n  let [file, setFile]=useState('');\n  let [fileName, setFileName]=useState('Choose File');\n  let [uploader, setUploader]=useState({});\n\n  const onChange= e =>{\n      setFile(e.target.files[0]);\n      setFileName(e.target.files[0].name);\n  };\n\nconst _handleSubmit= async e=> {\n    e.preventDefault();\n    let formData = new FormData();\n    formData.append('file', file);\n\n    try {\n        const res = await axios.post('/save', formData, {\n            headers: {'Content-Type': \"multipart/form-data\"}\n        });\n        const {fileName, filePath} = res.data\n        setUploader({fileName, filePath})\n    } catch (err) {\n        if (err.response.status === 500) {\n            console.log('there')\n        } else {\n            console.log(err.response.data.msg)\n        }\n    }\n};\n\nreturn (<BrowserRouter basename={process.env.PUBLIC_URL}>\n            <div>\n                <form onSubmit={_handleSubmit}>\n\n                    <input type=\"file\" name=\"file\" onChange={ onChange }/>\n                    <label type={'submit'} onClick={_handleSubmit} >{fileName}</label>\n\n                    <input type={'submit'} value={'UpLoad'}/>\n\n                </form>\n                <div>\n                    <img src={uploader.filePath} alt=\"Pic\"/>\n                </div>\n            </div>\n        </BrowserRouter>\n)\n}export default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}